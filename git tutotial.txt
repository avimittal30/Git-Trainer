git add <file name>
To get the file to be tracked by git

git add -A 
For all the files

git status 
to see whats happening

git commit  
to commit the file... once you are sure this is what you want to save

to commit multiple files:
git commit -m "<comment>"

Now.. if someone modifies your file and you want to restore the file to last commit
git checkout <file name>

Same command for multiple files
git checkout -f


To track all the changes done to the repository:
git log

To see all the commits done to the file and the changes done in each commit
git -log -p -<number of commits you want to see>

git diff
Compares files in working directory with the files in staging area. Once the changed files are added in 
the staging Area, git diff shows no difference because files in working directory and staging area
are same.


If you want to compare staging area with last commit then, use this:
git diff --staged


If I want to skip the add commit (adding to staging area) and directly want to commit, then
git commit -a -m "Skipped Staging step and added to code"

if a new file is created,then for the first time it has to be added to staging area

to remove files only from staging area
Create a new file: touch waste.py
Add it to staging area: git add -A
Remove it only from staging area: git rm --chached waste.py

To remove the file completely:
git rm -f waste.py


Version of git status:
git status -s


git ignore: for file that you dont want to track
create a file .gitignore : touch .gitignore
add the files you want to ignore in this file
git will ignore this file... will not show up even in got status

if you want to ignore file only in the root directory, then, write this in .gitignore:
/mylogs.log

and if you want to ignore all the log files present anywhere then
*.log and similar with other extentions

if you want to ignore any folder... then <folder name>/

To create a new branch:
git branch <branch_name>

to check all the branches:
git branch

to go inside another branch:
git checkout feature1

Make a change to one of the files, add in the staging area and commit. This change happens only
in feature1 branch.
However if you dont want this change to happen then:
git checkout master:
this will restore the changes done to the file in feature1









